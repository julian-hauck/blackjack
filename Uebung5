Rechnernetze, Übungsblatt 5, Sommer 2024
Aufgabe 2
Damit die drei Programme miteinander kommunizieren können, gilt es zu beachten, dass die Kommunikation genau spezifiziert wird, das heißt, dass einheitliche Objekte untereinander ausgetauscht werden, und dass die untereinander ausgetauschten Mitteilungen und Befehle einheitlich sind.
Außerdem müssen Nachrichten vom Empfänger bestätigt werden, sodass verloren gegangene UDP-Pakete bei ausbleibender Bestätigung erneut gesendet werden. Hierbei ist es sinnvoll nach einer hinreichenden Anzahl von Versuchen abzubrechen, um das Spiel nur noch mit den verbleibenden Spielern bzw. Kartenzählern fortzuführen. Im Falle meines Croupier-Programms werden ein Spieler und sein Kartenzähler nach 5 Fehlversuchen entfernt. (Jeweils wird 2 Sekunden auf eine Reaktion gewartet).
Zu beachten ist der Fall, dass das ursprüngliche Paket zwar angekommen ist, aber die Bestätigung verloren gegangen ist. In manchen Fällen ist ein doppeltes Empfangen der ursprünglichen Nachricht nicht dramatisch (z.B. bei der Ausschüttung des Gewinns). Allerdings wäre es fatal, wenn eine Spielaktion, die eigentlich angekommen ist, nochmals vom Spieler an den Croupier gesendet wird und dieser sie unerwünschter Weise als nächsten Spielzug interpretiert. Daher wird bei Spielaktionen immer die Karte inkl. Deck mitgesendet, auf die sie sich bezieht. Da jede Karte durch die Angabe des Decks eindeutig ist, werden so doppelt gesendete Spielaktionen erkannt und der Croupier sendet die verloren gegangene Bestätigung erneut, damit der Spieler das Spiel fortsetzt.
Da grundsätzlich nicht davon ausgegangen werden kann, dass alle Programme ordnungsgemäß funktionieren, überprüft mein Croupier-Programm alle zunächst jede Aktion darauf, ob sie überhaupt erlaubt ist, um inkonsistente Zustände zu vermeiden. Beispielsweise werden nach dem Austeilen der Karten keine Wetten mehr angenommen. Aber auch inhaltlich werden die Aktionen überprüft, beispielsweise, ob ein Spielzug überhaut angesichts der aktuellen Situation möglich ist.

Aufgabe 3
Das Croupier-Programm wird mit dem Argument <Portnummer> gestartet, unter welcher der Croupier erreichbar sein soll.
Sind alle gewünschten Spieler registriert, wird das Spiel durch <Enter> gestartet. Für jeden Spieler kann, aber muss nicht ein Kartenzähler registriert werden. Ist ein Kartenzähler registriert, erhält dieser ebenso wie sein Spieler alle Karten und von ihm wird am Ende jeder Runde eine Statistik angefragt, damit alle Spieler mit zu hoher Gewinnquote inkl. ihrem Kartenzählers entfern werden.

Aufgabe 4
Nachdem ich die Kommunikation des Croupiers mit den anderen Gruppen in dem Google-Dokument detailliert spezifiziert habe und die Karten sowie die Statistik des Kartenzählers als Standartobjekte implementiert und in einem GitHub-Repository mit der Möglichkeit einer Weiterbearbeitung bereitgestellt habe, wurden diese Spezifikationen offenbar ohne weitere Änderungen übernommen. Da keine Spezifikationen für die Kommunikation zwischen Spieler und Kartenzähler getroffen wurden, habe ich mein Programm so implementiert, dass man notfalls auch ohne die Registrierung von Kartenzählern spielen kann.
Mein Programm habe ich mit dem Spieler-Programm einer Kommilitonin getestet, wobei die Registrierung und das Austeilen der Karten ordnungsgemäß funktionierten. Das Testen der Spielaktionen gestaltete sich weniger wegen Kommunikationsproblemen unter den Programmen als
schwierig, sondern weil wir beide unsere Programme mangels der jeweils anderen Instanz nicht vorher hatten testen können und ein Beheben aller Bugs vor Ort nicht möglich war, sodass wir unsere Programme zu Hause nochmal überarbeitet haben.